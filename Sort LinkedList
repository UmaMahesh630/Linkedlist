public class ListNode{
public int val;
public ListNode next;

public ListNode(int val=0, ListNode next = null)
{
this.val = val;
this.next = next;
}
}

public class Solution{

public ListNode SortedList(ListNode head){
if(head == null || head.next == null)
{
return head;
}
//split the middle node

ListNode mid = GetMiddle(head);
ListNode righthalf = mid.next;

mid.next = null;
//Recurversly sort the halves

ListNode Leftsorted = SortedList(head);
ListNode Rightsorted = SortedList(righthalf);

return Merge(Leftsorted,Rightsorted);
}
private ListNode GetMiddle(ListNode head)
{

ListNode fast = head, slow = head;

while(fast != null && fast.next != null && fast.next.next != null)
{

slow = slow.next;
fast = fast.next.next;

}
return slow;

}

private ListNode Merge(ListNode l1, ListNode l2){
ListNode dummy = ListNode(0);
ListNode current = dummy;

while(l1 != null && l2 != null)
{
if(l1.val < l2.val){

current.next = l1;
l1 = l1.next;
}
else
{
current.next = l2;
l2 = l2.next;
}
currnt = current.next;

}

if(l1 != null) current.next = l1;
if(l2 != null) current.next = l2;

return dummy.next;
}
}
